// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockqueue

import (
	"context"

	"github.com/defany/db/v2/pkg/postgres/queue"
	"github.com/riverqueue/river"
	"github.com/riverqueue/river/rivertype"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWorker creates a new instance of MockWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorker[T river.JobArgs](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorker[T] {
	mock := &MockWorker[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorker is an autogenerated mock type for the Worker type
type MockWorker[T river.JobArgs] struct {
	mock.Mock
}

type MockWorker_Expecter[T river.JobArgs] struct {
	mock *mock.Mock
}

func (_m *MockWorker[T]) EXPECT() *MockWorker_Expecter[T] {
	return &MockWorker_Expecter[T]{mock: &_m.Mock}
}

// FetchJob provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) FetchJob(ctx context.Context, id int64) (*rivertype.JobRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchJob")
	}

	var r0 *rivertype.JobRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*rivertype.JobRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *rivertype.JobRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivertype.JobRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_FetchJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchJob'
type MockWorker_FetchJob_Call[T river.JobArgs] struct {
	*mock.Call
}

// FetchJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockWorker_Expecter[T]) FetchJob(ctx interface{}, id interface{}) *MockWorker_FetchJob_Call[T] {
	return &MockWorker_FetchJob_Call[T]{Call: _e.mock.On("FetchJob", ctx, id)}
}

func (_c *MockWorker_FetchJob_Call[T]) Run(run func(ctx context.Context, id int64)) *MockWorker_FetchJob_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWorker_FetchJob_Call[T]) Return(jobRow *rivertype.JobRow, err error) *MockWorker_FetchJob_Call[T] {
	_c.Call.Return(jobRow, err)
	return _c
}

func (_c *MockWorker_FetchJob_Call[T]) RunAndReturn(run func(ctx context.Context, id int64) (*rivertype.JobRow, error)) *MockWorker_FetchJob_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FetchJobs provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) FetchJobs(ctx context.Context, ids ...int64) ([]*rivertype.JobRow, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FetchJobs")
	}

	var r0 []*rivertype.JobRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...int64) ([]*rivertype.JobRow, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...int64) []*rivertype.JobRow); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rivertype.JobRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...int64) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_FetchJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchJobs'
type MockWorker_FetchJobs_Call[T river.JobArgs] struct {
	*mock.Call
}

// FetchJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...int64
func (_e *MockWorker_Expecter[T]) FetchJobs(ctx interface{}, ids ...interface{}) *MockWorker_FetchJobs_Call[T] {
	return &MockWorker_FetchJobs_Call[T]{Call: _e.mock.On("FetchJobs",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockWorker_FetchJobs_Call[T]) Run(run func(ctx context.Context, ids ...int64)) *MockWorker_FetchJobs_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int64
		var variadicArgs []int64
		if len(args) > 1 {
			variadicArgs = args[1].([]int64)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockWorker_FetchJobs_Call[T]) Return(jobRows []*rivertype.JobRow, err error) *MockWorker_FetchJobs_Call[T] {
	_c.Call.Return(jobRows, err)
	return _c
}

func (_c *MockWorker_FetchJobs_Call[T]) RunAndReturn(run func(ctx context.Context, ids ...int64) ([]*rivertype.JobRow, error)) *MockWorker_FetchJobs_Call[T] {
	_c.Call.Return(run)
	return _c
}

// JobStatuses provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) JobStatuses(ctx context.Context, ids ...int64) ([]queue.JobStatus, error) {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, ids)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for JobStatuses")
	}

	var r0 []queue.JobStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...int64) ([]queue.JobStatus, error)); ok {
		return returnFunc(ctx, ids...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...int64) []queue.JobStatus); ok {
		r0 = returnFunc(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queue.JobStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...int64) error); ok {
		r1 = returnFunc(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_JobStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobStatuses'
type MockWorker_JobStatuses_Call[T river.JobArgs] struct {
	*mock.Call
}

// JobStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...int64
func (_e *MockWorker_Expecter[T]) JobStatuses(ctx interface{}, ids ...interface{}) *MockWorker_JobStatuses_Call[T] {
	return &MockWorker_JobStatuses_Call[T]{Call: _e.mock.On("JobStatuses",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockWorker_JobStatuses_Call[T]) Run(run func(ctx context.Context, ids ...int64)) *MockWorker_JobStatuses_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int64
		var variadicArgs []int64
		if len(args) > 1 {
			variadicArgs = args[1].([]int64)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockWorker_JobStatuses_Call[T]) Return(jobStatuss []queue.JobStatus, err error) *MockWorker_JobStatuses_Call[T] {
	_c.Call.Return(jobStatuss, err)
	return _c
}

func (_c *MockWorker_JobStatuses_Call[T]) RunAndReturn(run func(ctx context.Context, ids ...int64) ([]queue.JobStatus, error)) *MockWorker_JobStatuses_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) Put(ctx context.Context, args T) (int64, error) {
	ret := _mock.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, T) (int64, error)); ok {
		return returnFunc(ctx, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, T) int64); ok {
		r0 = returnFunc(ctx, args)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, T) error); ok {
		r1 = returnFunc(ctx, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockWorker_Put_Call[T river.JobArgs] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - args T
func (_e *MockWorker_Expecter[T]) Put(ctx interface{}, args interface{}) *MockWorker_Put_Call[T] {
	return &MockWorker_Put_Call[T]{Call: _e.mock.On("Put", ctx, args)}
}

func (_c *MockWorker_Put_Call[T]) Run(run func(ctx context.Context, args T)) *MockWorker_Put_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWorker_Put_Call[T]) Return(n int64, err error) *MockWorker_Put_Call[T] {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockWorker_Put_Call[T]) RunAndReturn(run func(ctx context.Context, args T) (int64, error)) *MockWorker_Put_Call[T] {
	_c.Call.Return(run)
	return _c
}

// PutBatch provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) PutBatch(ctx context.Context, args ...T) ([]int64, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, args)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutBatch")
	}

	var r0 []int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...T) ([]int64, error)); ok {
		return returnFunc(ctx, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...T) []int64); ok {
		r0 = returnFunc(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...T) error); ok {
		r1 = returnFunc(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_PutBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBatch'
type MockWorker_PutBatch_Call[T river.JobArgs] struct {
	*mock.Call
}

// PutBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...T
func (_e *MockWorker_Expecter[T]) PutBatch(ctx interface{}, args ...interface{}) *MockWorker_PutBatch_Call[T] {
	return &MockWorker_PutBatch_Call[T]{Call: _e.mock.On("PutBatch",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockWorker_PutBatch_Call[T]) Run(run func(ctx context.Context, args ...T)) *MockWorker_PutBatch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []T
		var variadicArgs []T
		if len(args) > 1 {
			variadicArgs = args[1].([]T)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockWorker_PutBatch_Call[T]) Return(int64s []int64, err error) *MockWorker_PutBatch_Call[T] {
	_c.Call.Return(int64s, err)
	return _c
}

func (_c *MockWorker_PutBatch_Call[T]) RunAndReturn(run func(ctx context.Context, args ...T) ([]int64, error)) *MockWorker_PutBatch_Call[T] {
	_c.Call.Return(run)
	return _c
}

// PutBatchWithOpts provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) PutBatchWithOpts(ctx context.Context, options queue.Options, args ...T) ([]int64, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, options, args)
	} else {
		tmpRet = _mock.Called(ctx, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutBatchWithOpts")
	}

	var r0 []int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, queue.Options, ...T) ([]int64, error)); ok {
		return returnFunc(ctx, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, queue.Options, ...T) []int64); ok {
		r0 = returnFunc(ctx, options, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, queue.Options, ...T) error); ok {
		r1 = returnFunc(ctx, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_PutBatchWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBatchWithOpts'
type MockWorker_PutBatchWithOpts_Call[T river.JobArgs] struct {
	*mock.Call
}

// PutBatchWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - options queue.Options
//   - args ...T
func (_e *MockWorker_Expecter[T]) PutBatchWithOpts(ctx interface{}, options interface{}, args ...interface{}) *MockWorker_PutBatchWithOpts_Call[T] {
	return &MockWorker_PutBatchWithOpts_Call[T]{Call: _e.mock.On("PutBatchWithOpts",
		append([]interface{}{ctx, options}, args...)...)}
}

func (_c *MockWorker_PutBatchWithOpts_Call[T]) Run(run func(ctx context.Context, options queue.Options, args ...T)) *MockWorker_PutBatchWithOpts_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 queue.Options
		if args[1] != nil {
			arg1 = args[1].(queue.Options)
		}
		var arg2 []T
		var variadicArgs []T
		if len(args) > 2 {
			variadicArgs = args[2].([]T)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWorker_PutBatchWithOpts_Call[T]) Return(int64s []int64, err error) *MockWorker_PutBatchWithOpts_Call[T] {
	_c.Call.Return(int64s, err)
	return _c
}

func (_c *MockWorker_PutBatchWithOpts_Call[T]) RunAndReturn(run func(ctx context.Context, options queue.Options, args ...T) ([]int64, error)) *MockWorker_PutBatchWithOpts_Call[T] {
	_c.Call.Return(run)
	return _c
}

// PutWithOpts provides a mock function for the type MockWorker
func (_mock *MockWorker[T]) PutWithOpts(ctx context.Context, options queue.Options, args T) (int64, error) {
	ret := _mock.Called(ctx, options, args)

	if len(ret) == 0 {
		panic("no return value specified for PutWithOpts")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, queue.Options, T) (int64, error)); ok {
		return returnFunc(ctx, options, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, queue.Options, T) int64); ok {
		r0 = returnFunc(ctx, options, args)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, queue.Options, T) error); ok {
		r1 = returnFunc(ctx, options, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorker_PutWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutWithOpts'
type MockWorker_PutWithOpts_Call[T river.JobArgs] struct {
	*mock.Call
}

// PutWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - options queue.Options
//   - args T
func (_e *MockWorker_Expecter[T]) PutWithOpts(ctx interface{}, options interface{}, args interface{}) *MockWorker_PutWithOpts_Call[T] {
	return &MockWorker_PutWithOpts_Call[T]{Call: _e.mock.On("PutWithOpts", ctx, options, args)}
}

func (_c *MockWorker_PutWithOpts_Call[T]) Run(run func(ctx context.Context, options queue.Options, args T)) *MockWorker_PutWithOpts_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 queue.Options
		if args[1] != nil {
			arg1 = args[1].(queue.Options)
		}
		var arg2 T
		if args[2] != nil {
			arg2 = args[2].(T)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockWorker_PutWithOpts_Call[T]) Return(n int64, err error) *MockWorker_PutWithOpts_Call[T] {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockWorker_PutWithOpts_Call[T]) RunAndReturn(run func(ctx context.Context, options queue.Options, args T) (int64, error)) *MockWorker_PutWithOpts_Call[T] {
	_c.Call.Return(run)
	return _c
}
