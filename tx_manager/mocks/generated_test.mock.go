// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocktxman

import (
	"context"

	"github.com/defany/db/v2/tx_manager"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTx creates a new instance of MockTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTx {
	mock := &MockTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTx is an autogenerated mock type for the Tx type
type MockTx struct {
	mock.Mock
}

type MockTx_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTx) EXPECT() *MockTx_Expecter {
	return &MockTx_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockTx
func (_mock *MockTx) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTx_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockTx_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Begin(ctx interface{}) *MockTx_Begin_Call {
	return &MockTx_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockTx_Begin_Call) Run(run func(ctx context.Context)) *MockTx_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Begin_Call) Return(tx pgx.Tx, err error) *MockTx_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockTx_Begin_Call) RunAndReturn(run func(ctx context.Context) (pgx.Tx, error)) *MockTx_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockTx
func (_mock *MockTx) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Commit(ctx interface{}) *MockTx_Commit_Call {
	return &MockTx_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockTx_Commit_Call) Run(run func(ctx context.Context)) *MockTx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Commit_Call) Return(err error) *MockTx_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTx_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *MockTx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function for the type MockTx
func (_mock *MockTx) Conn() *pgx.Conn {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgx.Conn
	if returnFunc, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}
	return r0
}

// MockTx_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockTx_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockTx_Expecter) Conn() *MockTx_Conn_Call {
	return &MockTx_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockTx_Conn_Call) Run(run func()) *MockTx_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTx_Conn_Call) Return(conn *pgx.Conn) *MockTx_Conn_Call {
	_c.Call.Return(conn)
	return _c
}

func (_c *MockTx_Conn_Call) RunAndReturn(run func() *pgx.Conn) *MockTx_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFrom provides a mock function for the type MockTx
func (_mock *MockTx) CopyFrom(ctx context.Context, table pgx.Identifier, cols []string, src pgx.CopyFromSource) (int64, error) {
	ret := _mock.Called(ctx, table, cols, src)

	if len(ret) == 0 {
		panic("no return value specified for CopyFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)); ok {
		return returnFunc(ctx, table, cols, src)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) int64); ok {
		r0 = returnFunc(ctx, table, cols, src)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) error); ok {
		r1 = returnFunc(ctx, table, cols, src)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTx_CopyFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFrom'
type MockTx_CopyFrom_Call struct {
	*mock.Call
}

// CopyFrom is a helper method to define mock.On call
//   - ctx context.Context
//   - table pgx.Identifier
//   - cols []string
//   - src pgx.CopyFromSource
func (_e *MockTx_Expecter) CopyFrom(ctx interface{}, table interface{}, cols interface{}, src interface{}) *MockTx_CopyFrom_Call {
	return &MockTx_CopyFrom_Call{Call: _e.mock.On("CopyFrom", ctx, table, cols, src)}
}

func (_c *MockTx_CopyFrom_Call) Run(run func(ctx context.Context, table pgx.Identifier, cols []string, src pgx.CopyFromSource)) *MockTx_CopyFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Identifier
		if args[1] != nil {
			arg1 = args[1].(pgx.Identifier)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 pgx.CopyFromSource
		if args[3] != nil {
			arg3 = args[3].(pgx.CopyFromSource)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTx_CopyFrom_Call) Return(n int64, err error) *MockTx_CopyFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTx_CopyFrom_Call) RunAndReturn(run func(ctx context.Context, table pgx.Identifier, cols []string, src pgx.CopyFromSource) (int64, error)) *MockTx_CopyFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockTx
func (_mock *MockTx) Exec(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgconn.CommandTag, error)); ok {
		return returnFunc(ctx, sql, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgconn.CommandTag); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTx_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockTx_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *MockTx_Expecter) Exec(ctx interface{}, sql interface{}, args ...interface{}) *MockTx_Exec_Call {
	return &MockTx_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockTx_Exec_Call) Run(run func(ctx context.Context, sql string, args ...any)) *MockTx_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTx_Exec_Call) Return(commandTag pgconn.CommandTag, err error) *MockTx_Exec_Call {
	_c.Call.Return(commandTag, err)
	return _c
}

func (_c *MockTx_Exec_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) (pgconn.CommandTag, error)) *MockTx_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// LargeObjects provides a mock function for the type MockTx
func (_mock *MockTx) LargeObjects() pgx.LargeObjects {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LargeObjects")
	}

	var r0 pgx.LargeObjects
	if returnFunc, ok := ret.Get(0).(func() pgx.LargeObjects); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(pgx.LargeObjects)
	}
	return r0
}

// MockTx_LargeObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LargeObjects'
type MockTx_LargeObjects_Call struct {
	*mock.Call
}

// LargeObjects is a helper method to define mock.On call
func (_e *MockTx_Expecter) LargeObjects() *MockTx_LargeObjects_Call {
	return &MockTx_LargeObjects_Call{Call: _e.mock.On("LargeObjects")}
}

func (_c *MockTx_LargeObjects_Call) Run(run func()) *MockTx_LargeObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTx_LargeObjects_Call) Return(largeObjects pgx.LargeObjects) *MockTx_LargeObjects_Call {
	_c.Call.Return(largeObjects)
	return _c
}

func (_c *MockTx_LargeObjects_Call) RunAndReturn(run func() pgx.LargeObjects) *MockTx_LargeObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function for the type MockTx
func (_mock *MockTx) Prepare(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error) {
	ret := _mock.Called(ctx, name, sql)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *pgconn.StatementDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*pgconn.StatementDescription, error)); ok {
		return returnFunc(ctx, name, sql)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *pgconn.StatementDescription); ok {
		r0 = returnFunc(ctx, name, sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgconn.StatementDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, sql)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTx_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockTx_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - sql string
func (_e *MockTx_Expecter) Prepare(ctx interface{}, name interface{}, sql interface{}) *MockTx_Prepare_Call {
	return &MockTx_Prepare_Call{Call: _e.mock.On("Prepare", ctx, name, sql)}
}

func (_c *MockTx_Prepare_Call) Run(run func(ctx context.Context, name string, sql string)) *MockTx_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTx_Prepare_Call) Return(statementDescription *pgconn.StatementDescription, err error) *MockTx_Prepare_Call {
	_c.Call.Return(statementDescription, err)
	return _c
}

func (_c *MockTx_Prepare_Call) RunAndReturn(run func(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error)) *MockTx_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockTx
func (_mock *MockTx) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgx.Rows, error)); ok {
		return returnFunc(ctx, sql, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Rows); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTx_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockTx_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *MockTx_Expecter) Query(ctx interface{}, sql interface{}, args ...interface{}) *MockTx_Query_Call {
	return &MockTx_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockTx_Query_Call) Run(run func(ctx context.Context, sql string, args ...any)) *MockTx_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTx_Query_Call) Return(rows pgx.Rows, err error) *MockTx_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockTx_Query_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) (pgx.Rows, error)) *MockTx_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockTx
func (_mock *MockTx) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Row); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}
	return r0
}

// MockTx_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockTx_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *MockTx_Expecter) QueryRow(ctx interface{}, sql interface{}, args ...interface{}) *MockTx_QueryRow_Call {
	return &MockTx_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockTx_QueryRow_Call) Run(run func(ctx context.Context, sql string, args ...any)) *MockTx_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTx_QueryRow_Call) Return(row pgx.Row) *MockTx_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockTx_QueryRow_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) pgx.Row) *MockTx_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockTx
func (_mock *MockTx) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Rollback(ctx interface{}) *MockTx_Rollback_Call {
	return &MockTx_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockTx_Rollback_Call) Run(run func(ctx context.Context)) *MockTx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Rollback_Call) Return(err error) *MockTx_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTx_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *MockTx_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SendBatch provides a mock function for the type MockTx
func (_mock *MockTx) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	ret := _mock.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 pgx.BatchResults
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pgx.Batch) pgx.BatchResults); ok {
		r0 = returnFunc(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.BatchResults)
		}
	}
	return r0
}

// MockTx_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type MockTx_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - b *pgx.Batch
func (_e *MockTx_Expecter) SendBatch(ctx interface{}, b interface{}) *MockTx_SendBatch_Call {
	return &MockTx_SendBatch_Call{Call: _e.mock.On("SendBatch", ctx, b)}
}

func (_c *MockTx_SendBatch_Call) Run(run func(ctx context.Context, b *pgx.Batch)) *MockTx_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Batch
		if args[1] != nil {
			arg1 = args[1].(*pgx.Batch)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTx_SendBatch_Call) Return(batchResults pgx.BatchResults) *MockTx_SendBatch_Call {
	_c.Call.Return(batchResults)
	return _c
}

func (_c *MockTx_SendBatch_Call) RunAndReturn(run func(ctx context.Context, b *pgx.Batch) pgx.BatchResults) *MockTx_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxManager creates a new instance of MockTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxManager {
	mock := &MockTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTxManager is an autogenerated mock type for the TxManager type
type MockTxManager struct {
	mock.Mock
}

type MockTxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxManager) EXPECT() *MockTxManager_Expecter {
	return &MockTxManager_Expecter{mock: &_m.Mock}
}

// ReadCommitted provides a mock function for the type MockTxManager
func (_mock *MockTxManager) ReadCommitted(ctx context.Context, h txman.Handler, opts ...txman.TxOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, h, opts)
	} else {
		tmpRet = _mock.Called(ctx, h)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ReadCommitted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, txman.Handler, ...txman.TxOption) error); ok {
		r0 = returnFunc(ctx, h, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTxManager_ReadCommitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadCommitted'
type MockTxManager_ReadCommitted_Call struct {
	*mock.Call
}

// ReadCommitted is a helper method to define mock.On call
//   - ctx context.Context
//   - h txman.Handler
//   - opts ...txman.TxOption
func (_e *MockTxManager_Expecter) ReadCommitted(ctx interface{}, h interface{}, opts ...interface{}) *MockTxManager_ReadCommitted_Call {
	return &MockTxManager_ReadCommitted_Call{Call: _e.mock.On("ReadCommitted",
		append([]interface{}{ctx, h}, opts...)...)}
}

func (_c *MockTxManager_ReadCommitted_Call) Run(run func(ctx context.Context, h txman.Handler, opts ...txman.TxOption)) *MockTxManager_ReadCommitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 txman.Handler
		if args[1] != nil {
			arg1 = args[1].(txman.Handler)
		}
		var arg2 []txman.TxOption
		var variadicArgs []txman.TxOption
		if len(args) > 2 {
			variadicArgs = args[2].([]txman.TxOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTxManager_ReadCommitted_Call) Return(err error) *MockTxManager_ReadCommitted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTxManager_ReadCommitted_Call) RunAndReturn(run func(ctx context.Context, h txman.Handler, opts ...txman.TxOption) error) *MockTxManager_ReadCommitted_Call {
	_c.Call.Return(run)
	return _c
}

// RepeatableRead provides a mock function for the type MockTxManager
func (_mock *MockTxManager) RepeatableRead(ctx context.Context, h txman.Handler, opts ...txman.TxOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, h, opts)
	} else {
		tmpRet = _mock.Called(ctx, h)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RepeatableRead")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, txman.Handler, ...txman.TxOption) error); ok {
		r0 = returnFunc(ctx, h, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTxManager_RepeatableRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepeatableRead'
type MockTxManager_RepeatableRead_Call struct {
	*mock.Call
}

// RepeatableRead is a helper method to define mock.On call
//   - ctx context.Context
//   - h txman.Handler
//   - opts ...txman.TxOption
func (_e *MockTxManager_Expecter) RepeatableRead(ctx interface{}, h interface{}, opts ...interface{}) *MockTxManager_RepeatableRead_Call {
	return &MockTxManager_RepeatableRead_Call{Call: _e.mock.On("RepeatableRead",
		append([]interface{}{ctx, h}, opts...)...)}
}

func (_c *MockTxManager_RepeatableRead_Call) Run(run func(ctx context.Context, h txman.Handler, opts ...txman.TxOption)) *MockTxManager_RepeatableRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 txman.Handler
		if args[1] != nil {
			arg1 = args[1].(txman.Handler)
		}
		var arg2 []txman.TxOption
		var variadicArgs []txman.TxOption
		if len(args) > 2 {
			variadicArgs = args[2].([]txman.TxOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTxManager_RepeatableRead_Call) Return(err error) *MockTxManager_RepeatableRead_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTxManager_RepeatableRead_Call) RunAndReturn(run func(ctx context.Context, h txman.Handler, opts ...txman.TxOption) error) *MockTxManager_RepeatableRead_Call {
	_c.Call.Return(run)
	return _c
}

// RunWithOpts provides a mock function for the type MockTxManager
func (_mock *MockTxManager) RunWithOpts(ctx context.Context, h txman.Handler, opts []txman.TxOption) error {
	ret := _mock.Called(ctx, h, opts)

	if len(ret) == 0 {
		panic("no return value specified for RunWithOpts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, txman.Handler, []txman.TxOption) error); ok {
		r0 = returnFunc(ctx, h, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTxManager_RunWithOpts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWithOpts'
type MockTxManager_RunWithOpts_Call struct {
	*mock.Call
}

// RunWithOpts is a helper method to define mock.On call
//   - ctx context.Context
//   - h txman.Handler
//   - opts []txman.TxOption
func (_e *MockTxManager_Expecter) RunWithOpts(ctx interface{}, h interface{}, opts interface{}) *MockTxManager_RunWithOpts_Call {
	return &MockTxManager_RunWithOpts_Call{Call: _e.mock.On("RunWithOpts", ctx, h, opts)}
}

func (_c *MockTxManager_RunWithOpts_Call) Run(run func(ctx context.Context, h txman.Handler, opts []txman.TxOption)) *MockTxManager_RunWithOpts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 txman.Handler
		if args[1] != nil {
			arg1 = args[1].(txman.Handler)
		}
		var arg2 []txman.TxOption
		if args[2] != nil {
			arg2 = args[2].([]txman.TxOption)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTxManager_RunWithOpts_Call) Return(err error) *MockTxManager_RunWithOpts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTxManager_RunWithOpts_Call) RunAndReturn(run func(ctx context.Context, h txman.Handler, opts []txman.TxOption) error) *MockTxManager_RunWithOpts_Call {
	_c.Call.Return(run)
	return _c
}

// Serializable provides a mock function for the type MockTxManager
func (_mock *MockTxManager) Serializable(ctx context.Context, h txman.Handler, opts ...txman.TxOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, h, opts)
	} else {
		tmpRet = _mock.Called(ctx, h)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Serializable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, txman.Handler, ...txman.TxOption) error); ok {
		r0 = returnFunc(ctx, h, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTxManager_Serializable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serializable'
type MockTxManager_Serializable_Call struct {
	*mock.Call
}

// Serializable is a helper method to define mock.On call
//   - ctx context.Context
//   - h txman.Handler
//   - opts ...txman.TxOption
func (_e *MockTxManager_Expecter) Serializable(ctx interface{}, h interface{}, opts ...interface{}) *MockTxManager_Serializable_Call {
	return &MockTxManager_Serializable_Call{Call: _e.mock.On("Serializable",
		append([]interface{}{ctx, h}, opts...)...)}
}

func (_c *MockTxManager_Serializable_Call) Run(run func(ctx context.Context, h txman.Handler, opts ...txman.TxOption)) *MockTxManager_Serializable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 txman.Handler
		if args[1] != nil {
			arg1 = args[1].(txman.Handler)
		}
		var arg2 []txman.TxOption
		var variadicArgs []txman.TxOption
		if len(args) > 2 {
			variadicArgs = args[2].([]txman.TxOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTxManager_Serializable_Call) Return(err error) *MockTxManager_Serializable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTxManager_Serializable_Call) RunAndReturn(run func(ctx context.Context, h txman.Handler, opts ...txman.TxOption) error) *MockTxManager_Serializable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostgres creates a new instance of MockPostgres. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostgres(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostgres {
	mock := &MockPostgres{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostgres is an autogenerated mock type for the Postgres type
type MockPostgres struct {
	mock.Mock
}

type MockPostgres_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostgres) EXPECT() *MockPostgres_Expecter {
	return &MockPostgres_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type MockPostgres
func (_mock *MockPostgres) BeginTx(ctx context.Context, opts pgx.TxOptions) (txman.Tx, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 txman.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) (txman.Tx, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) txman.Tx); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txman.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.TxOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostgres_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockPostgres_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts pgx.TxOptions
func (_e *MockPostgres_Expecter) BeginTx(ctx interface{}, opts interface{}) *MockPostgres_BeginTx_Call {
	return &MockPostgres_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, opts)}
}

func (_c *MockPostgres_BeginTx_Call) Run(run func(ctx context.Context, opts pgx.TxOptions)) *MockPostgres_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.TxOptions
		if args[1] != nil {
			arg1 = args[1].(pgx.TxOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostgres_BeginTx_Call) Return(tx txman.Tx, err error) *MockPostgres_BeginTx_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockPostgres_BeginTx_Call) RunAndReturn(run func(ctx context.Context, opts pgx.TxOptions) (txman.Tx, error)) *MockPostgres_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}
